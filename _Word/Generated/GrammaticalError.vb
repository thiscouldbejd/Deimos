Namespace Word

	''' <summary>Textual Grammatical Error.</summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>17/02/2014 16:06:41</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Deimos\_Word\Generated\GrammaticalError.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Deimos\_Word\Generated\GrammaticalError.tt", "1")> _
	Partial Public Class GrammaticalError
		Inherits System.Object
		Implements System.IComparable

		#Region " Public Constructors "

			''' <summary>Default Constructor</summary>
			Public Sub New()

				MyBase.New()

			End Sub

			''' <summary>Parametered Constructor (1 Parameters)</summary>
			Public Sub New( _
				ByVal _Value As System.String _
			)

				MyBase.New()

				Value = _Value

			End Sub

			''' <summary>Parametered Constructor (2 Parameters)</summary>
			Public Sub New( _
				ByVal _Value As System.String, _
				ByVal _Location As System.Int32 _
			)

				MyBase.New()

				Value = _Value
				Location = _Location

			End Sub

		#End Region

		#Region " Class Plumbing/Interface Code "

			#Region " IComparable Implementation "

				#Region " Public Methods "

					''' <summary>Comparison Method</summary>
					Public Overridable Function IComparable_CompareTo( _
						ByVal value As System.Object _
					) As System.Int32 Implements System.IComparable.CompareTo

						If value Is Nothing Then Return 1

						Dim typed_Value As GrammaticalError = TryCast(value, GrammaticalError)

						If typed_Value Is Nothing Then

							Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")

						Else

							Dim return_Value As Integer = 0

							If Me.Value Is Nothing AndAlso typed_Value.Value Is Nothing Then
								return_Value = 0
							ElseIf Me.Value Is Nothing Then
								return_Value = -1
							ElseIf typed_Value.Value Is Nothing Then
								return_Value = 1
							Else
								return_Value = Me.Value.CompareTo(typed_Value.Value)
							End If
							If return_Value <> 0 Then Return return_Value

							Return return_Value

						End If

					End Function

				#End Region

			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Value</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_VALUE As String = "Value"

			''' <summary>Public Shared Reference to the Name of the Property: Location</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_LOCATION As String = "Location"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Value</summary>
			''' <remarks></remarks>
			Private m_Value As System.String

			''' <summary>Private Data Storage Variable for Property: Location</summary>
			''' <remarks></remarks>
			Private m_Location As System.Int32

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Value</summary>
			''' <remarks></remarks>
			Public Property Value() As System.String
				Get
					Return m_Value
				End Get
				Set(value As System.String)
					m_Value = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Location</summary>
			''' <remarks></remarks>
			Public Property Location() As System.Int32
				Get
					Return m_Location
				End Get
				Set(value As System.Int32)
					m_Location = value
				End Set
			End Property

		#End Region

	End Class

End Namespace